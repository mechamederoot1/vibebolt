import React, { useState, useRef, useEffect } from "react";
import {
  Camera,
  MapPin,
  Calendar,
  Edit3,
  MoreHorizontal,
  Mail,
  Phone,
  UserPlus,
  MessageCircle,
  Eye,
  Play,
} from "lucide-react";
import { PhotoViewerModal } from "../modals/PhotoViewerModal";
import { PhotoManagementModal } from "../modals/PhotoManagementModal";

interface ProfileHeaderProps {
  user: {
    id?: number;
    name: string;
    email?: string;
    avatar?: string;
    cover_photo?: string;
    location?: string;
    bio?: string;
    username?: string;
    nickname?: string;
    is_verified?: boolean;
    followers_count?: number;
    following_count?: number;
    posts_count?: number;
  };
  isOwnProfile: boolean;
  userToken: string;
  onEditProfile?: () => void;
  onProfileUpdate?: () => void;
  currentUserId?: number;
}

interface Story {
  id: number;
  content: string;
  media_type?: string;
  media_url?: string;
  background_color?: string;
  created_at: string;
  expires_at: string;
  views_count: number;
}

export function EnhancedProfileHeader({
  user,
  isOwnProfile,
  userToken,
  onEditProfile,
  onProfileUpdate,
  currentUserId,
}: ProfileHeaderProps) {
  const [isUploadingAvatar, setIsUploadingAvatar] = useState(false);
  const [isUploadingCover, setIsUploadingCover] = useState(false);
  const [showCoverUpload, setShowCoverUpload] = useState(false);
  const [showPhotoViewer, setShowPhotoViewer] = useState(false);
  const [showPhotoManagement, setShowPhotoManagement] = useState(false);
  const [photoManagementTab, setPhotoManagementTab] = useState<
    "profile" | "cover"
  >("profile");
  const [userStories, setUserStories] = useState<Story[]>([]);
  const [hasUnreadStories, setHasUnreadStories] = useState(false);
  const [showStoryOptions, setShowStoryOptions] = useState(false);

  const avatarInputRef = useRef<HTMLInputElement>(null);
  const coverInputRef = useRef<HTMLInputElement>(null);

  // Fetch user stories
  useEffect(() => {
    if (user.id) {
      fetchUserStories();
    }
  }, [user.id, userToken]);

  const fetchUserStories = async () => {
    try {
      const response = await fetch(
        `http://localhost:8000/stories/user/${user.id}`,
        {
          headers: {
            Authorization: `Bearer ${userToken}`,
          },
        },
      );

      if (response.ok) {
        const stories = await response.json();
        setUserStories(stories);

        // Check if stories are unread (get from localStorage)
        const viewedStories = JSON.parse(
          localStorage.getItem("viewedStories") || "[]",
        );
        const hasUnread = stories.some((story: Story) => {
          const isRecent =
            Date.now() - new Date(story.created_at).getTime() <
            24 * 60 * 60 * 1000;
          return isRecent && !viewedStories.includes(story.id);
        });
        setHasUnreadStories(hasUnread);
      }
    } catch (error) {
      console.error("Error fetching user stories:", error);
    }
  };

  const createProfilePhotoPost = async (
    photoUrl: string,
    privacy: "public" | "friends" | "private" = "public",
  ) => {
    try {
      const response = await fetch("http://localhost:8000/posts/", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${userToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          content: "Atualizou a foto do perfil",
          post_type: "post",
          media_type: "photo",
          media_url: photoUrl,
          privacy,
        }),
      });

      if (!response.ok) {
        console.error("Erro ao criar post da foto do perfil");
      }
    } catch (error) {
      console.error("Erro ao criar post da foto do perfil:", error);
    }
  };

  const createProfilePhotoAlbumEntry = async (photoUrl: string) => {
    try {
      const response = await fetch(
        "http://localhost:8000/albums/profile-photos/add",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${userToken}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            photo_url: photoUrl,
            privacy: "public", // Profile photos are usually public
          }),
        },
      );

      if (!response.ok) {
        console.error("Erro ao adicionar foto ao álbum");
      }
    } catch (error) {
      console.error("Erro ao adicionar foto ao álbum:", error);
    }
  };

  const handleAvatarChange = async (
    event: React.ChangeEvent<HTMLInputElement>,
  ) => {
    const file = event.target.files?.[0];
    if (!file || !userToken) return;

    setIsUploadingAvatar(true);

        const formData = new FormData();
    formData.append("avatar", file);

    try {
            const response = await fetch("http://localhost:8000/profile/avatar", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${userToken}`,
        },
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();

        // Create album entry for profile photos
        await createProfilePhotoAlbumEntry(data.avatar_url);

        // Create a post about the profile photo update
        await createProfilePhotoPost(data.avatar_url, "public");

        if (onProfileUpdate) {
          onProfileUpdate();
        }
      } else {
        const errorData = await response.json();
        console.error("Avatar upload error:", errorData);
        alert(
          `Erro ao enviar foto: ${errorData.detail || "Erro desconhecido"}`,
        );
      }
    } catch (error) {
      console.error("Erro ao fazer upload da foto:", error);
<<<<<<< HEAD
      alert(
        `Erro ao enviar foto: ${error instanceof Error ? error.message : "Erro desconhecido"}`,
      );
=======
      alert("Erro ao enviar foto");
>>>>>>> 9765b1b75ce40044bdfd03e22cb81063dca5ca92
    } finally {
      setIsUploadingAvatar(false);
    }
  };

  const handleCoverChange = async (
    event: React.ChangeEvent<HTMLInputElement>,
  ) => {
    const file = event.target.files?.[0];
    if (!file || !userToken) return;

    setIsUploadingCover(true);

    const formData = new FormData();
<<<<<<< HEAD
    formData.append("file", file);
=======
    formData.append("cover", file);
>>>>>>> 9765b1b75ce40044bdfd03e22cb81063dca5ca92

    try {
      const response = await fetch("http://localhost:8000/users/me/cover", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${userToken}`,
        },
        body: formData,
      });

      if (response.ok) {
        if (onProfileUpdate) {
          onProfileUpdate();
        }
      } else {
        const errorData = await response.json();
<<<<<<< HEAD
        console.error("Cover upload error:", errorData);
=======
>>>>>>> 9765b1b75ce40044bdfd03e22cb81063dca5ca92
        alert(
          `Erro ao enviar capa: ${errorData.detail || "Erro desconhecido"}`,
        );
      }
    } catch (error) {
      console.error("Erro ao fazer upload da capa:", error);
<<<<<<< HEAD
      alert(
        `Erro ao enviar capa: ${error instanceof Error ? error.message : "Erro desconhecido"}`,
      );
=======
      alert("Erro ao enviar capa");
>>>>>>> 9765b1b75ce40044bdfd03e22cb81063dca5ca92
    } finally {
      setIsUploadingCover(false);
      setShowCoverUpload(false);
    }
  };

  const handleAvatarClick = () => {
    if (userStories.length > 0) {
      setShowStoryOptions(true);
    } else if (user.avatar) {
      setShowPhotoViewer(true);
    }
  };

  const handleViewStories = () => {
    // This would open the story viewer with the user's stories
    // You would implement this similar to how stories are viewed in the feed
    console.log("Viewing stories for user:", user.id);
    setShowStoryOptions(false);

    // Mark stories as viewed
    const viewedStories = JSON.parse(
      localStorage.getItem("viewedStories") || "[]",
    );
    const newViewed = [...viewedStories, ...userStories.map((s) => s.id)];
    localStorage.setItem("viewedStories", JSON.stringify(newViewed));
    setHasUnreadStories(false);
  };

  const handleViewProfilePicture = () => {
    setShowPhotoViewer(true);
    setShowStoryOptions(false);
  };

  return (
    <div className="bg-white rounded-xl shadow-sm overflow-hidden">
      {/* Cover Photo */}
      <div
        className="h-64 bg-gradient-to-r from-blue-500 to-purple-600 relative group cursor-pointer"
        style={{
          backgroundImage: user.cover_photo
            ? `url(${user.cover_photo.startsWith("http") ? user.cover_photo : `http://localhost:8000${user.cover_photo}`})`
            : undefined,
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
        onMouseEnter={() => isOwnProfile && setShowCoverUpload(true)}
        onMouseLeave={() => setShowCoverUpload(false)}
      >
        {/* Cover Photo Upload Overlay */}
        {isOwnProfile && (showCoverUpload || !user.cover_photo) && (
          <div className="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center transition-opacity">
            <div className="flex space-x-4">
              <button
                onClick={() => coverInputRef.current?.click()}
                disabled={isUploadingCover}
                className="flex items-center space-x-2 bg-white bg-opacity-90 hover:bg-opacity-100 text-gray-800 px-4 py-3 rounded-lg font-medium transition-all transform hover:scale-105"
              >
                {isUploadingCover ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-gray-800"></div>
                    <span>Enviando...</span>
                  </>
                ) : (
                  <>
                    <Camera className="w-5 h-5" />
                    <span>
                      {user.cover_photo ? "Alterar capa" : "Adicionar capa"}
                    </span>
                  </>
                )}
              </button>

              {user.cover_photo && (
                <button
                  onClick={() => {
                    setPhotoManagementTab("cover");
                    setShowPhotoManagement(true);
                  }}
                  className="flex items-center space-x-2 bg-white bg-opacity-90 hover:bg-opacity-100 text-gray-800 px-4 py-3 rounded-lg font-medium transition-all transform hover:scale-105"
                  title="Gerenciar fotos de capa"
                >
                  <Edit3 className="w-5 h-5" />
                  <span>Gerenciar</span>
                </button>
              )}
            </div>
          </div>
        )}

        <input
          ref={coverInputRef}
          type="file"
          accept="image/*"
          onChange={handleCoverChange}
          className="hidden"
        />
      </div>

      {/* Profile Info */}
      <div className="px-6 pb-6">
        <div className="flex flex-col sm:flex-row sm:items-end sm:space-x-6">
          {/* Avatar with Story Ring */}
          <div className="relative -mt-20 mb-4 sm:mb-0 group">
            <div className="relative">
              {/* Story Ring */}
              {userStories.length > 0 && (
                <div
                  className={`absolute inset-0 rounded-full p-1 ${
                    hasUnreadStories
                      ? "bg-gradient-to-r from-purple-500 to-pink-500"
                      : "bg-gray-300"
                  }`}
                >
                  <div className="w-full h-full bg-white rounded-full"></div>
                </div>
              )}

              <img
                src={
                  user.avatar
                    ? user.avatar.startsWith("http")
                      ? user.avatar
                      : `http://localhost:8000${user.avatar}`
                    : `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=3B82F6&color=fff&size=128`
                }
                alt={user.name}
                className={`w-32 h-32 rounded-full border-4 border-white shadow-lg cursor-pointer relative z-10 ${
                  userStories.length > 0 ? "ring-2 ring-white" : ""
                }`}
                onClick={handleAvatarClick}
              />

              {/* Story count indicator */}
              {userStories.length > 0 && (
                <div className="absolute -top-1 -right-1 z-20">
                  {hasUnreadStories ? (
                    <div className="bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center font-bold shadow-lg animate-pulse">
                      {userStories.length > 9 ? "9+" : userStories.length}
                    </div>
                  ) : (
                    <div className="bg-green-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center font-bold shadow-lg">
                      <Eye className="w-3 h-3" />
                    </div>
                  )}
                </div>
              )}

              {/* Avatar Upload Button (for own profile) */}
              {isOwnProfile && (
                <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-40 rounded-full flex items-center justify-center transition-all group-hover:bg-opacity-40 z-10">
                  <div className="flex space-x-2 transform scale-0 group-hover:scale-100 transition-transform">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        avatarInputRef.current?.click();
                      }}
                      disabled={isUploadingAvatar}
                      className="bg-white bg-opacity-90 hover:bg-opacity-100 p-2 rounded-full transition-colors"
                      title="Alterar foto"
                    >
                      {isUploadingAvatar ? (
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-800"></div>
                      ) : (
                        <Camera className="w-4 h-4 text-gray-800" />
                      )}
                    </button>
                    {user.avatar && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          setPhotoManagementTab("profile");
                          setShowPhotoManagement(true);
                        }}
                        className="bg-white bg-opacity-90 hover:bg-opacity-100 p-2 rounded-full transition-colors"
                        title="Gerenciar fotos do perfil"
                      >
                        <Edit3 className="w-4 h-4 text-gray-800" />
                      </button>
                    )}
                  </div>
                </div>
              )}
            </div>

            <input
              ref={avatarInputRef}
              type="file"
              accept="image/*"
              onChange={handleAvatarChange}
              className="hidden"
            />
          </div>

          {/* User Info */}
          <div className="flex-1">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <div>
                <div className="flex items-center space-x-2">
                  <h1 className="text-2xl font-bold text-gray-900">
                    {user.name}
                  </h1>
                  {user.is_verified && (
                    <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-xs">✓</span>
                    </div>
                  )}
                </div>

                {user.bio && (
                  <p className="text-gray-600 mt-1 max-w-md">{user.bio}</p>
                )}

                <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                  {user.location && (
                    <div className="flex items-center space-x-1">
                      <MapPin className="w-4 h-4" />
                      <span>{user.location}</span>
                    </div>
                  )}
                  <div className="flex items-center space-x-1">
                    <Calendar className="w-4 h-4" />
                    <span>Entrou em março de 2024</span>
                  </div>
                </div>

                {/* Stats */}
                <div className="flex items-center space-x-6 mt-3">
                  <div className="text-center">
                    <div className="font-semibold text-gray-900">
                      {user.posts_count || 0}
                    </div>
                    <div className="text-sm text-gray-500">Posts</div>
                  </div>
                  <div className="text-center">
                    <div className="font-semibold text-gray-900">
                      {user.followers_count || 0}
                    </div>
                    <div className="text-sm text-gray-500">Seguidores</div>
                  </div>
                  <div className="text-center">
                    <div className="font-semibold text-gray-900">
                      {user.following_count || 0}
                    </div>
                    <div className="text-sm text-gray-500">Seguindo</div>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex items-center space-x-3 mt-4 sm:mt-0">
                {isOwnProfile ? (
                  <button
                    onClick={onEditProfile}
                    className="flex items-center space-x-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 rounded-lg font-medium transition-colors"
                  >
                    <Edit3 className="w-4 h-4" />
                    <span>Editar Perfil</span>
                  </button>
                ) : (
                  <>
                    <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
                      <UserPlus className="w-4 h-4" />
                      <span>Seguir</span>
                    </button>
                    <button className="flex items-center space-x-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 rounded-lg font-medium transition-colors">
                      <MessageCircle className="w-4 h-4" />
                      <span>Mensagem</span>
                    </button>
                  </>
                )}
                <button className="p-2 bg-gray-100 hover:bg-gray-200 text-gray-800 rounded-lg transition-colors">
                  <MoreHorizontal className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Story Options Modal */}
      {showStoryOptions && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 mx-4 max-w-sm w-full">
            <h3 className="text-lg font-semibold mb-4 text-center">
              {user.name}
            </h3>
            <div className="space-y-3">
              <button
                onClick={handleViewStories}
                className="w-full flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg transition-colors"
              >
                <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                  <Play className="w-5 h-5 text-white fill-current" />
                </div>
                <div className="flex-1 text-left">
                  <div className="font-medium">Ver Story</div>
                  <div className="text-sm text-gray-500">
                    {userStories.length}{" "}
                    {userStories.length === 1 ? "story" : "stories"}
                  </div>
                </div>
              </button>

              {user.avatar && (
                <button
                  onClick={handleViewProfilePicture}
                  className="w-full flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg transition-colors"
                >
                  <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                    <Eye className="w-5 h-5 text-gray-600" />
                  </div>
                  <div className="flex-1 text-left">
                    <div className="font-medium">Ver Foto do Perfil</div>
                  </div>
                </button>
              )}
            </div>

            <button
              onClick={() => setShowStoryOptions(false)}
              className="w-full mt-4 py-2 text-gray-500 hover:text-gray-700 transition-colors"
            >
              Cancelar
            </button>
          </div>
        </div>
      )}

      {/* Photo Viewer Modal */}
      {showPhotoViewer && user.avatar && (
        <PhotoViewerModal
          isOpen={showPhotoViewer}
          onClose={() => setShowPhotoViewer(false)}
          imageUrl={
            user.avatar.startsWith("http")
              ? user.avatar
              : `http://localhost:8000${user.avatar}`
          }
          user={user}
          userToken={userToken}
          currentUserId={currentUserId}
        />
      )}

      {/* Photo Management Modal */}
      {showPhotoManagement && (
        <PhotoManagementModal
          isOpen={showPhotoManagement}
          onClose={() => setShowPhotoManagement(false)}
          user={user}
          userToken={userToken}
          activeTab={photoManagementTab}
          onTabChange={setPhotoManagementTab}
          onProfileUpdate={onProfileUpdate}
        />
      )}
    </div>
  );
}